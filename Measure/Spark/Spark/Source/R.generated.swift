//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `SetPoint.wav`.
    static let setPointWav = Rswift.FileResource(bundle: R.hostingBundle, name: "SetPoint", pathExtension: "wav")
    
    /// `bundle.url(forResource: "SetPoint", withExtension: "wav")`
    static func setPointWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.setPointWav
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 17 images.
  struct image {
    /// Image `Default-568h`.
    static let default568h = Rswift.ImageResource(bundle: R.hostingBundle, name: "Default-568h")
    /// Image `cancle_back`.
    static let cancle_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancle_back")
    /// Image `cancle_delete`.
    static let cancle_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancle_delete")
    /// Image `img_indicator_disable`.
    static let img_indicator_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_indicator_disable")
    /// Image `img_indicator_enable`.
    static let img_indicator_enable = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_indicator_enable")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `menu_area`.
    static let menu_area = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_area")
    /// Image `menu_length`.
    static let menu_length = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_length")
    /// Image `menu_reset`.
    static let menu_reset = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_reset")
    /// Image `menu_save`.
    static let menu_save = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_save")
    /// Image `menu_setting`.
    static let menu_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_setting")
    /// Image `more_off`.
    static let more_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_off")
    /// Image `more_on`.
    static let more_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "more_on")
    /// Image `place_area`.
    static let place_area = Rswift.ImageResource(bundle: R.hostingBundle, name: "place_area")
    /// Image `place_done`.
    static let place_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "place_done")
    /// Image `place_length`.
    static let place_length = Rswift.ImageResource(bundle: R.hostingBundle, name: "place_length")
    /// Image `result_copy`.
    static let result_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "result_copy")
    
    /// `UIImage(named: "Default-568h", bundle: ..., traitCollection: ...)`
    static func default568h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default568h, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cancle_back", bundle: ..., traitCollection: ...)`
    static func cancle_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancle_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cancle_delete", bundle: ..., traitCollection: ...)`
    static func cancle_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancle_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_indicator_disable", bundle: ..., traitCollection: ...)`
    static func img_indicator_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_indicator_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_indicator_enable", bundle: ..., traitCollection: ...)`
    static func img_indicator_enable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_indicator_enable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_area", bundle: ..., traitCollection: ...)`
    static func menu_area(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_area, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_length", bundle: ..., traitCollection: ...)`
    static func menu_length(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_length, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_reset", bundle: ..., traitCollection: ...)`
    static func menu_reset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_reset, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_save", bundle: ..., traitCollection: ...)`
    static func menu_save(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_save, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_setting", bundle: ..., traitCollection: ...)`
    static func menu_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_off", bundle: ..., traitCollection: ...)`
    static func more_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "more_on", bundle: ..., traitCollection: ...)`
    static func more_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "place_area", bundle: ..., traitCollection: ...)`
    static func place_area(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.place_area, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "place_done", bundle: ..., traitCollection: ...)`
    static func place_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.place_done, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "place_length", bundle: ..., traitCollection: ...)`
    static func place_length(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.place_length, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "result_copy", bundle: ..., traitCollection: ...)`
    static func result_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.result_copy, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `SettingViewController`.
    static let settingViewController = _R.storyboard.settingViewController()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "SettingViewController", bundle: ...)`
    static func settingViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.sparkString` struct is generated, and contains static references to 14 localization keys.
    struct sparkString {
      /// Value: AR excessive motion
      static let arExcessiveMotion = Rswift.StringResource(key: "ARExcessiveMotion", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AR insufficient features
      static let arInsufficientFeatures = Rswift.StringResource(key: "ARInsufficientFeatures", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AR is initializing
      static let arInitializing = Rswift.StringResource(key: "ARInitializing", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AR not available
      static let arNotAvailable = Rswift.StringResource(key: "ARNotAvailable", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Area measurement
      static let startArea = Rswift.StringResource(key: "StartArea", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Copy to the clipboard
      static let didCopy = Rswift.StringResource(key: "DidCopy", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Device moves too fast
      static let arExcessiveMotionMessage = Rswift.StringResource(key: "ARExcessiveMotionMessage", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Length measurement
      static let startLength = Rswift.StringResource(key: "StartLength", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please open the album permissions in the Settings
      static let saveNeedPermission = Rswift.StringResource(key: "SaveNeedPermission", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please shake the device to get more feature points
      static let arInitializingMessage = Rswift.StringResource(key: "ARInitializingMessage", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save fail
      static let saveFail = Rswift.StringResource(key: "SaveFail", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save success
      static let saveSuccess = Rswift.StringResource(key: "SaveSuccess", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Setting
      static let setting = Rswift.StringResource(key: "Setting", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The feature point is not sufficient, please sway the equipment to obtain more feature points
      static let arInsufficientFeaturesMessage = Rswift.StringResource(key: "ARInsufficientFeaturesMessage", tableName: "SparkString", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: AR excessive motion
      static func arExcessiveMotion(_: Void = ()) -> String {
        return NSLocalizedString("ARExcessiveMotion", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: AR insufficient features
      static func arInsufficientFeatures(_: Void = ()) -> String {
        return NSLocalizedString("ARInsufficientFeatures", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: AR is initializing
      static func arInitializing(_: Void = ()) -> String {
        return NSLocalizedString("ARInitializing", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: AR not available
      static func arNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("ARNotAvailable", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Area measurement
      static func startArea(_: Void = ()) -> String {
        return NSLocalizedString("StartArea", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Copy to the clipboard
      static func didCopy(_: Void = ()) -> String {
        return NSLocalizedString("DidCopy", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Device moves too fast
      static func arExcessiveMotionMessage(_: Void = ()) -> String {
        return NSLocalizedString("ARExcessiveMotionMessage", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Length measurement
      static func startLength(_: Void = ()) -> String {
        return NSLocalizedString("StartLength", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please open the album permissions in the Settings
      static func saveNeedPermission(_: Void = ()) -> String {
        return NSLocalizedString("SaveNeedPermission", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please shake the device to get more feature points
      static func arInitializingMessage(_: Void = ()) -> String {
        return NSLocalizedString("ARInitializingMessage", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save fail
      static func saveFail(_: Void = ()) -> String {
        return NSLocalizedString("SaveFail", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Save success
      static func saveSuccess(_: Void = ()) -> String {
        return NSLocalizedString("SaveSuccess", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Setting
      static func setting(_: Void = ()) -> String {
        return NSLocalizedString("Setting", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: The feature point is not sufficient, please sway the equipment to obtain more feature points
      static func arInsufficientFeaturesMessage(_: Void = ()) -> String {
        return NSLocalizedString("ARInsufficientFeaturesMessage", tableName: "SparkString", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try settingViewController.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct settingViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingViewController"
      let settingViewControllerID = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewControllerID")
      
      func settingViewControllerID(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewControllerID)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.settingViewController().settingViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewControllerID' could not be loaded from storyboard 'SettingViewController' as 'SettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
